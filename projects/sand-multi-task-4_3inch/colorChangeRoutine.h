#include <Arduino.h>

// Arrays for sine fade technique array color cycling, as seen from:
// https://arduino.stackexchange.com/questions/35734/better-cycling-through-the-rgb-colors

const uint8_t sins1[360] = {
    127, 129, 131, 134, 136, 138, 140, 143, 145, 147, 149, 151, 154, 156, 158, 160, 162, 164, 166, 169, 171, 173, 175, 177, 179, 181, 183, 185, 187, 189, 191, 193, 195, 196, 198, 200,
    202, 204, 205, 207, 209, 211, 212, 214, 216, 217, 219, 220, 222, 223, 225, 226, 227, 229, 230, 231, 233, 234, 235, 236, 237, 239, 240, 241, 242, 243, 243, 244, 245, 246, 247, 248,
    248, 249, 250, 250, 251, 251, 252, 252, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 255, 254, 254, 254, 254, 254, 254, 254, 253, 253, 253, 252, 252, 251, 251, 250, 250, 249,
    248, 248, 247, 246, 245, 244, 243, 243, 242, 241, 240, 239, 237, 236, 235, 234, 233, 231, 230, 229, 227, 226, 225, 223, 222, 220, 219, 217, 216, 214, 212, 211, 209, 207, 205, 204,
    202, 200, 198, 196, 195, 193, 191, 189, 187, 185, 183, 181, 179, 177, 175, 173, 171, 169, 166, 164, 162, 160, 158, 156, 154, 151, 149, 147, 145, 143, 140, 138, 136, 134, 131, 129,
    127, 125, 123, 120, 118, 116, 114, 111, 109, 107, 105, 103, 100, 98, 96, 94, 92, 90, 88, 85, 83, 81, 79, 77, 75, 73, 71, 69, 67, 65, 63, 61, 59, 58, 56, 54,
    52, 50, 49, 47, 45, 43, 42, 40, 38, 37, 35, 34, 32, 31, 29, 28, 27, 25, 24, 23, 21, 20, 19, 18, 17, 15, 14, 13, 12, 11, 11, 10, 9, 8, 7, 6,
    6, 5, 4, 4, 3, 3, 2, 2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5,
    6, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 31, 32, 34, 35, 37, 38, 40, 42, 43, 45, 47, 49, 50,
    52, 54, 56, 58, 59, 61, 63, 65, 67, 69, 71, 73, 75, 77, 79, 81, 83, 85, 88, 90, 92, 94, 96, 98, 100, 103, 105, 107, 109, 111, 114, 116, 118, 120, 123, 125};

const uint8_t sins2[360] = {
    0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 15, 17, 18, 20, 22, 24, 26, 28, 30, 32, 35, 37, 39,
    42, 44, 47, 49, 52, 55, 58, 60, 63, 66, 69, 72, 75, 78, 81, 85, 88, 91, 94, 97, 101, 104, 107, 111, 114, 117, 121, 124, 127, 131, 134, 137,
    141, 144, 147, 150, 154, 157, 160, 163, 167, 170, 173, 176, 179, 182, 185, 188, 191, 194, 197, 200, 202, 205, 208, 210, 213, 215, 217, 220, 222, 224, 226, 229,
    231, 232, 234, 236, 238, 239, 241, 242, 244, 245, 246, 248, 249, 250, 251, 251, 252, 253, 253, 254, 254, 255, 255, 255, 255, 255, 255, 255, 254, 254, 253, 253,
    252, 251, 251, 250, 249, 248, 246, 245, 244, 242, 241, 239, 238, 236, 234, 232, 231, 229, 226, 224, 222, 220, 217, 215, 213, 210, 208, 205, 202, 200, 197, 194,
    191, 188, 185, 182, 179, 176, 173, 170, 167, 163, 160, 157, 154, 150, 147, 144, 141, 137, 134, 131, 127, 124, 121, 117, 114, 111, 107, 104, 101, 97, 94, 91,
    88, 85, 81, 78, 75, 72, 69, 66, 63, 60, 58, 55, 52, 49, 47, 44, 42, 39, 37, 35, 32, 30, 28, 26, 24, 22, 20, 18, 17, 15, 13, 12,
    11, 9, 8, 7, 6, 5, 4, 3, 2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

void setNextColor_sin1(uint8_t *rgbValues, uint8_t &kValue)
{
    rgbValues[0] = sins1[kValue];
    rgbValues[1] = sins1[(kValue + 120) % 360];
    rgbValues[2] = sins1[(kValue + 240) % 360];
    kValue++;
}

void setNextColor_sin2(uint8_t *rgbValues, uint8_t &kValue)
{
    rgbValues[0] = sins2[(kValue + 120) % 360];
    rgbValues[1] = sins2[kValue];
    rgbValues[2] = sins2[(kValue + 240) % 360];
    kValue++;
}

// Color changing state machine
void setNextColor(uint8_t *rgbValues, uint8_t &kValue)
{
    switch (kValue)
    {
    case 0:
        rgbValues[1] += (uint8_t)2; // Increment green
        if (rgbValues[1] == (uint8_t)64)
        {
            rgbValues[1] = (uint8_t)63;
            kValue = (uint8_t)1;
        }
        break;
    case 1:
        rgbValues[0]--; // Decrement red
        if (rgbValues[0] == (uint8_t)255)
        {
            rgbValues[0] = (uint8_t)0;
            kValue = (uint8_t)2;
        }
        break;
    case 2:
        rgbValues[2]++; // Increment blue
        if (rgbValues[2] == (uint8_t)32)
        {
            rgbValues[2] = (uint8_t)31;
            kValue = (uint8_t)3;
        }
        break;
    case 3:
        rgbValues[1] -= (uint8_t)2; // Decrement green
        if (rgbValues[1] == (uint8_t)255)
        {
            rgbValues[1] = (uint8_t)0;
            kValue = (uint8_t)4;
        }
        break;
    case 4:
        rgbValues[0]++; // Increment red
        if (rgbValues[0] == (uint8_t)32)
        {
            rgbValues[0] = (uint8_t)31;
            kValue = (uint8_t)5;
        }
        break;
    case 5:
        rgbValues[2]--; // Increment blue
        if (rgbValues[2] == (uint8_t)255)
        {
            rgbValues[2] = (uint8_t)0;
            kValue = (uint8_t)0;
        }
        break;
    }
}

uint8_t dr = 0;
uint8_t dg = 0;
uint8_t db = 0;

void setNextColor2(uint8_t *rgbValues)
{
    rgbValues[0] += dr;
    rgbValues[1] += dg;
    rgbValues[2] += db;

    if (rgbValues[0] == 255 && rgbValues[1] == 0 && rgbValues[2] == 0)
    {
        dr = 0;
        dg = 1;
        db = 0;
    }

    if (rgbValues[0] == 255 && rgbValues[1] == 255 && rgbValues[2] == 0)
    {
        dr = -1;
        dg = 0;
        db = 0;
    }

    if (rgbValues[0] == 0 && rgbValues[1] == 255 && rgbValues[2] == 0)
    {
        dr = 0;
        dg = 0;
        db = 1;
    }

    if (rgbValues[0] == 0 && rgbValues[1] == 255 && rgbValues[2] == 255)
    {
        dr = 0;
        dg = -1;
        db = 0;
    }

    if (rgbValues[0] == 0 && rgbValues[1] == 0 && rgbValues[2] == 255)
    {
        dr = 1;
        dg = 0;
        db = 0;
    }

    if (rgbValues[0] == 255 && rgbValues[1] == 0 && rgbValues[2] == 255)
    {
        dr = 0;
        dg = 0;
        db = -1;
    }
}